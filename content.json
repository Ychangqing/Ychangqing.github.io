{"meta":{"title":"Ychangqing Web Development Engineer","subtitle":"","description":"","author":"Ychangqing","url":"https://ychangqing.github.io","root":"/"},"pages":[{"title":"categories","date":"2020-07-23T03:11:46.000Z","updated":"2020-12-29T07:55:25.333Z","comments":false,"path":"categories/index.html","permalink":"https://ychangqing.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-07-23T03:10:48.000Z","updated":"2020-07-23T03:15:30.516Z","comments":false,"path":"tags/index.html","permalink":"https://ychangqing.github.io/tags/index.html","excerpt":"","text":""},{"title":"项目","date":"2020-07-23T03:32:50.363Z","updated":"2020-07-23T03:32:50.363Z","comments":false,"path":"repository/index.html","permalink":"https://ychangqing.github.io/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"如何使用docker部署一个vue项目","slug":"docker","date":"2020-09-24T16:00:00.000Z","updated":"2020-12-29T09:55:25.501Z","comments":true,"path":"2020/09/25/docker/","link":"","permalink":"https://ychangqing.github.io/2020/09/25/docker/","excerpt":"","text":"记一次在服务器使用docker nginx部署vue项目的例子 开始为什么要使用docker来完成部署想象一下，我们的一台服务器中有10个vue web项目，10个node项目，10个java项目，那我们的服务器必然要有一套node环境，一套java环境以及各种依赖，针对同一个引擎，可能不同的项目有不同的版本依赖，那将会出现的情况是，开发人员在本地可以运行项目，一旦部署到服务器，必然会因为版本问题，导致项目无法运行，如何解决这些版本依赖的问题呢？三种方法： 虚拟机 缺点： 占用资源多、启动慢、冗余步骤多、虚拟机之间无法通信 Linux 容器 基于Linux开发， 启动快、占用资源少、体积小、容器之间可以互相通信 Docker 容器 Linux 容器d的","categories":[{"name":"服务器","slug":"服务器","permalink":"https://ychangqing.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://ychangqing.github.io/tags/docker/"}]},{"title":"用node写一个获取bing每日图片的小工具","slug":"interesting-code","date":"2020-07-29T16:00:00.000Z","updated":"2020-07-30T16:00:00.000Z","comments":true,"path":"2020/07/30/interesting-code/","link":"","permalink":"https://ychangqing.github.io/2020/07/30/interesting-code/","excerpt":"","text":"摘要&amp;目录摘要：办公室这么多块屏幕，闲置的屏幕总是显示一张桌面背景太枯燥了，我们来写一个获取bing每日图片的小工具 涉及到的工具和知识点： - node - 正则表示式 - mac launchctl 语法规则 目录：摘要&amp;目录准备事项bing每日图片代码正则解析node端代码 完整代码 准备事项 找到Bing每日图片地址: https://bing.ioliu.cn/?p=1，网站是这位大佬写的 准备一个node环境 找一台Mac Book Pro 🤣 bing每日图片代码正则解析打开Bing每日图片网页后，打开控制台，我们看到第一个请求包含了整个网页的所有图片数据，看起来图片列表并不是通过xhr请求获取的，目测是服务端渲染？我们把第一个请求的Response直接拷贝下来，格式化后会看到小尺寸的图片地址：http://h2.ioliu.cn/bing/WCDBabyElephant_ZH-CN7844400740_640x480.jpg?imageslim怎么用正则匹配呢，推荐一个学习正则表达式的网站https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md，讲解非常清晰，可以在线联系。我们直接看一个已经写好的例子，可以看到匹配出了12个图片 node端代码首先我们根据链接https://bing.ioliu.cn/?p=1获取页面列表的代码 12345678910111213const fs = require('fs');const axios = require('axios');const request = require('request');const basePicPath = '/Users/yinxiangzheng/Pictures/BingDayPic/'; // 存放图片的地方const urlList = []const pageSize = 10async function downByPage(page = 1) &#123; try &#123; const res = await axios.get(`https://bing.ioliu.cn/?p=$&#123;page&#125;`) &#125; catch (error) &#123; console.log(error); &#125;&#125; 根据获取的代码，使用正则表达式：/data-progressive=&quot;(\\S*)&quot;/gm 解析图片url 123456789101112131415161718192021// 接上面的代码const regex = /data-progressive=\"(\\S*)\"/gm;const str = res.data;let m;while ((m = regex.exec(str)) !== null) &#123; if (m.index === regex.lastIndex) &#123; regex.lastIndex++; &#125; m.forEach((match, groupIndex) =&gt; &#123; // match： data-progressive=\"http://h2.ioliu.cn/bing/BenasqueValley_ZH-CN7931589735_640x480.jpg?imageslim\" if (!match || groupIndex !== 1) &#123; return &#125; const url = match.replace('_640x480.jpg', '_1920x1080.jpg'); if (urlList.indexOf(url) !== -1) &#123; return &#125; urlList.push(url) console.log('Downloaded...', url); &#125;);&#125; 保存图片到本地 123// 接上面的代码let fileName = `$&#123;basePicPath&#125;$&#123;randomNum(10, 1000000000)&#125;.jpg`request(url).pipe(fs.createWriteStream(fileName)); 完整代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384/** @Author: Yin Xiang Zheng* @LastEditors: Yin Xiang Zheng* @LastEditTime: 2020-12-29 17:37:40*/const fs = require('fs');const axios = require('axios');const request = require('request');const basePicPath = '/Users/yinxiangzheng/Pictures/BingDayPic/'; // 存放图片的地方const urlList = []const pageSize = 10async function downByPage(page = 1) &#123; try &#123; const res = await axios.get(`https://bing.ioliu.cn/?p=$&#123;page&#125;`) const regex = /data-progressive=\"(\\S*)\"/gm; const str = res.data; let m; while ((m = regex.exec(str)) !== null) &#123; if (m.index === regex.lastIndex) &#123; regex.lastIndex++; &#125; m.forEach((match, groupIndex) =&gt; &#123; // match： data-progressive=\"http://h2.ioliu.cn/bing/BenasqueValley_ZH-CN7931589735_640x480.jpg?imageslim\" if (!match || groupIndex !== 1) &#123; return &#125; const url = match.replace('_640x480.jpg', '_1920x1080.jpg'); if (urlList.indexOf(url) !== -1) &#123; return &#125; urlList.push(url) console.log('Downloaded...', url); let fileName = `$&#123;basePicPath&#125;$&#123;randomNum(10, 1000000000)&#125;.jpg` request(url).pipe(fs.createWriteStream(fileName)); &#125;); &#125; &#125; catch (error) &#123; console.log(error); &#125;&#125;function delDir(path) &#123; let files = []; if (fs.existsSync(path)) &#123; files = fs.readdirSync(path); files.forEach((file, index) =&gt; &#123; let curPath = path + \"/\" + file; if (fs.statSync(curPath).isDirectory()) &#123; delDir(curPath); //递归删除文件夹 &#125; else &#123; fs.unlinkSync(curPath); //删除文件 &#125; &#125;); fs.rmdirSync(path); &#125; fs.mkdirSync(basePicPath)&#125;function randomNum(minNum, maxNum) &#123; switch (arguments.length) &#123; case 1: return parseInt(Math.random() * minNum + 1, 10); break; case 2: return parseInt(Math.random() * (maxNum - minNum + 1) + minNum, 10); break; default: return 0; break; &#125;&#125;async function start() &#123; delDir(basePicPath) // 清除文图片列表，只保留最新的图片 for (let i = 1; i &lt; pageSize; i++) &#123; await downByPage(i) &#125;&#125;start()","categories":[{"name":"有意思的代码","slug":"有意思的代码","permalink":"https://ychangqing.github.io/categories/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"有意思的代码","slug":"有意思的代码","permalink":"https://ychangqing.github.io/tags/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E4%BB%A3%E7%A0%81/"}]},{"title":"每天一道算法题","slug":"one-question-per-day","date":"2020-07-29T16:00:00.000Z","updated":"2020-07-30T16:00:00.000Z","comments":true,"path":"2020/07/30/one-question-per-day/","link":"","permalink":"https://ychangqing.github.io/2020/07/30/one-question-per-day/","excerpt":"","text":"每天一道leetcode算法题！！！2020-07-31 盛最多水的容器12345678910111213141516// 刚开始考虑的是暴力解题法，使用reduce，每次循环减去数组的第一个，然后用这个数组从前向后算出面积，取最大值var maxArea = function (height) &#123; let max = 0 height.reduce((pre, cur, curIindex, arr) =&gt; &#123; let a = pre &gt; cur ? cur * curIindex : pre * curIindex arr.slice(curIindex).reduce((sPre, sCur, sCurIindex, sarr) =&gt; &#123; let b = sPre &gt; sCur ? sCur * sCurIindex : sPre * sCurIindex max = max &gt; b ? max : b return sPre &#125;) max = max &gt; a ? max : a return pre &#125;) return max&#125; 12345678// 后来看了社区的双向指针，优化如下：var maxArea = function (height) &#123; let before = 0 let after = height.length - 1 while(before &lt; after) &#123; &#125;&#125; 2020-12-03 数组移位 插入操作123456789101112131415161718192021222324/** * 给定一个有限数组，在指定下标位置插入元素（注意：假设给定下标从0开始，插入后保证数组长度不变） * 示例： * 数组：var arr = [0, 1, 2, 3, 4, 5, empty, empty, empty, empty] * 输入：(3, 'elm') * 输出：[0, 1, 2, 'elm', 3, 4, 5, empty, empty, empty] * * 时间复杂度：O(n) */var arr = new Array(10)for (let i = 0; i &lt; 6; i++) &#123; arr[i] = i&#125;function insert(i, elm) &#123; if (i&lt;0 || i &gt; arr.length - 1) &#123; return arr &#125; for (let j = arr.length - 1; j &gt; i; j--) &#123; arr[j] = arr[j-1] &#125; arr[i] = elm&#125;insert(3, 'elm') 2020-12-03 数组移位 删除操作1234567891011121314151617181920212223/** * 给定一个有限数组，删除指定下标的元素，其余元素均前移（注意：假设下标从0开始，删除后保证数组长度不变） * 示例： * 数组：var arr = [0, 1, 2, 3, 4, 5, empty, empty, empty, empty] * 输入：(3) * 输出：[0, 1, 2, 4, 5, empty, empty, empty, empty, empty] * * 时间复杂度：O(n) */var arr = new Array(10)for (let i = 0; i &lt; 6; i++) &#123; arr[i] = i&#125;function deleteElm(i) &#123; if (i &lt; 0 || i &gt; arr.length - 1) &#123; return arr &#125; for (let j = i; j &lt; arr.length; j++) &#123; arr[j] = arr[j + 1] &#125;&#125;deleteElm(3) 2020-12-04 [最富有客户的资产总量](https://leetcode-cn.com/problems/richest-customer-wealth/)123456789101112131415161718/** * @param &#123;number[][]&#125; accounts * @return &#123;number&#125; */var maximumWealth = function(accounts) &#123; if (!accounts || accounts.length === 0) &#123; return 0 &#125; let count = 0 for (let i = 0; i &lt; accounts.length; i++) &#123; const element = accounts[i]; const sCount = element.reduce((pre, cur) =&gt; &#123; return pre + cur &#125;, 0) if (sCount &gt; count) count = sCount &#125; return count&#125;; 2020-12-05 [一维数组的动态和](https://leetcode-cn.com/problems/running-sum-of-1d-array/)12345678910111213/** * @param &#123;number[]&#125; nums * @return &#123;number[]&#125; */var runningSum = function (nums) &#123; if (!nums || nums.length == 0) &#123; return [] &#125; for (let i = 0; i &lt; nums.length; i++) &#123; nums[i] += nums[i - 1] || 0 &#125; return nums&#125;; 2020-12-05 [设计 Goal 解析器](https://leetcode-cn.com/problems/goal-parser-interpretation/) 正则表达式教程 12345678910111213141516171819/** * @param &#123;number[]&#125; nums * @return &#123;number[]&#125; */var runningSum = function (nums) &#123; if (!nums || nums.length == 0) &#123; return [] &#125; let res = [] for (let i = 0; i &lt; nums.length; i++) &#123; let elm = nums[i] if (i === 0) &#123; res.push(elm) continue &#125; res.push(elm + res[i - 1]) &#125; return res&#125;;","categories":[],"tags":[{"name":"每日一题","slug":"每日一题","permalink":"https://ychangqing.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}]},{"title":"日常总结","slug":"daily-summary","date":"2020-07-22T16:00:00.000Z","updated":"2020-12-29T09:55:09.856Z","comments":true,"path":"2020/07/23/daily-summary/","link":"","permalink":"https://ychangqing.github.io/2020/07/23/daily-summary/","excerpt":"","text":"总结了一些在工作中常用js工具函数 更新：函数越来越多，直接将其打包放在GitHub中，日后使用时直接安装npm包 npm地址1npm install js-tool-function 开始去重插入123456pushIfNotExist = function(array, elem) &#123; if (array.indexOf(elem) == -1) &#123; array.push(elem); &#125; return array;&#125; 去重合并数组12345pushApply = function(a, b=[]) &#123; a.forEach(function(value) &#123; pushIfNotExist(b, value); &#125;);&#125; 美化日期间隔123456789101112131415161718192021222324timeDifference = function(previous) &#123; const current = Date.now(); let msPerMinute = 60 * 1000; let msPerHour = msPerMinute * 60; let msPerDay = msPerHour * 24; let msPerMonth = msPerDay * 30; let msPerYear = msPerDay * 365; let elapsed = current - previous; if (elapsed &lt; msPerMinute) &#123; return '刚刚'; &#125; else if (elapsed &lt; msPerHour) &#123; return Math.round(elapsed / msPerMinute) + ' 分钟前'; &#125; else if (elapsed &lt; msPerDay) &#123; return Math.round(elapsed / msPerHour) + ' 小时前'; &#125; else if (elapsed &lt; msPerMonth) &#123; return Math.round(elapsed / msPerDay) + ' 天前'; &#125; else if (elapsed &lt; msPerYear) &#123; return Math.round(elapsed / msPerMonth) + ' 月前'; &#125; else &#123; return '一年前'; &#125;&#125; 编译阿里云OSS文件URL 我不知道为什么阿里底层存储URL的逻辑会是这样，但是如果文件名中带有复杂字符串，浏览器默认的编译结果和阿里OSS编译的结果不一样，导致无法打开文件，实际上文件确实已经存储在OSS中了 123456getAliOSSUrl = function(url) &#123; return encodeURIComponent(url) .replace(/%2F/g, '/') .replace(/\\+/g, '%2B') .replace('%3A', ':')&#125;, 获取字符串的HashCode 使用场景：有十个长度的颜色的数组，colorArr = [#000, #fff, …]，数据库中有一百个title，让每个title都有属于自己的颜色： colorArr[getHashCode(title) % colorArr.length] 1234567891011getHashCode = function(str, caseSensitive) &#123; if (!caseSensitive) &#123; str = str.toLowerCase(); &#125; let hash = 1315423911, i, ch; for (i = str.length - 1; i &gt;= 0; i--) &#123; ch = str.charCodeAt(i); hash ^= ((hash &lt;&lt; 5) + ch + (hash &gt;&gt; 2)); &#125; return (hash &amp; 0x7FFFFFFF);&#125;, 数组判断是否包含123hasElement = function(array, elem) &#123; return isNonEmptyArray(array) &amp;&amp; array.indexOf(elem) != -1;&#125; 判断是否为IOS系统1234isIOS = function() &#123; const u = navigator.userAgent return !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/)&#125; 判断是否为Android系统1234isAndroid = function() &#123; const u = navigator.userAgent return u.indexOf('Android') &gt; -1 || u.indexOf('Adr') &gt; -1&#125; 一个简单的debounce函数，用于触底加载1234567891011121314151617debounce = function(func, wait, immediate) &#123; let timeout return function(e) &#123; let context = e let later = function() &#123; timeout = null if (!immediate) &#123; func.apply(context) &#125; &#125; clearTimeout(timeout) timeout = setTimeout(later, wait) if (immediate &amp;&amp; !timeout) &#123; func.apply(context) &#125; &#125;&#125; 简单的模版渲染函数12345678910111213// \"Hello, &#123;name&#125;, are you feeling &#123;adjective&#125;?\".formatUnicorn(&#123;name:\"Gabriel\", adjective: \"OK\"&#125;);String.prototype.formatUnicorn = String.prototype.formatUnicorn || function () &#123; let str = this.toString(); if (arguments.length) &#123; let t = typeof arguments[0]; let key; let args = (\"string\" === t || \"number\" === t) ? Array.prototype.slice.call(arguments) : arguments[0]; for (key in args) &#123; str = str.replace(new RegExp(\"\\\\&#123;\" + key + \"\\\\&#125;\", \"gi\"), args[key]); &#125; &#125; return str;&#125;; 数组转对象1234567array2object = function(array = [], keys = &#123;&#125;) &#123; let res = &#123;&#125; for (let i = 0; i &lt; array.length; i++) &#123; res[keys[i]] = true; &#125; return res;&#125;","categories":[],"tags":[{"name":"JS常用工具函数","slug":"JS常用工具函数","permalink":"https://ychangqing.github.io/tags/JS%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0/"}]}],"categories":[{"name":"服务器","slug":"服务器","permalink":"https://ychangqing.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"有意思的代码","slug":"有意思的代码","permalink":"https://ychangqing.github.io/categories/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://ychangqing.github.io/tags/docker/"},{"name":"有意思的代码","slug":"有意思的代码","permalink":"https://ychangqing.github.io/tags/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E4%BB%A3%E7%A0%81/"},{"name":"每日一题","slug":"每日一题","permalink":"https://ychangqing.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"},{"name":"JS常用工具函数","slug":"JS常用工具函数","permalink":"https://ychangqing.github.io/tags/JS%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0/"}]}